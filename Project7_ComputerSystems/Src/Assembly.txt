//Add
@SP         //Get stack pointer
AM=M-1      //Decrement stack pointer and set A to M-1
D=M         //Set D to the last value on the stack
A=A-1       //Set pointer to last value - 1
M=M+D       //Compute the sum and put in memory

//Sub
@SP         //Get stack point
AM=M-1      //Decrement stack pointer and set A to M-1
D=M         //Pop value to D
A=A-1       //Decrement address
M=M-D       //Push difference to stack

//Neg
D=0         //Set D register to 0
@SP         //Get stack pointer
A=M-1       //Set address to location SP-1
M=D-M       //Set memory to 0-M (the negation)

//-1 is true
//EQ
@SP             //Get SP
AM=M-1          //Decrement SP and dereference
D=M             //Put value in D register
A=A-1           //Decrement address is A
D=M-D           //Calculate difference Y - X
@FALSE          //Put FALSE code address in A
D;JNE           //If D is not equal (eq is false) jump to 0
@SP             //If no jump set put SP in A
A=M-1           //Put SP-1 in A
M=-1            //Push -1 to SP-1 to set as true
@CONTINUE       //Set CONTINUE in memory
0;JMP           //Jump to CONTINUE
(FALSE)         //If FALSE (we jumped here)
@SP             //Get SP
A=M-1           //Get address of SP-1 and store in A
M=0             //Set that to 0
(CONTINUE)      //...CONTINUE

//GT
@SP             //Get SP
AM=M-1          //Decrement SP and dereference
D=M             //Put value in D register
A=A-1           //Decrement address is A
D=M-D           //Calculate difference Y - X
@FALSE          //Put FALSE code address in A
D;JLE           //If D is negative jump to false
@SP             //If no jump set put SP in A
A=M-1           //Put SP-1 in A
M=-1            //Push -1 to SP-1
@CONTINUE       //Set CONTINUE in memory
0;JMP           //Jump to CONTINUE
(FALSE)         //If FALSE (we jumped here)
@SP             //Get SP
A=M-1           //Get address of SP-1 and store in A
M=0             //Set that to 0
(CONTINUE)      //...CONTINUE

//LT
@SP             //Get SP
AM=M-1          //Decrement SP and dereference
D=M             //Put value in D register
A=A-1           //Decrement address is A
D=M-D           //Calculate difference Y - X
@FALSE          //Put FALSE code address in A
D;JGE           //If D is positive jump to false
@SP             //If no jump set put SP in A
A=M-1           //Put SP-1 in A
M=-1            //Push -1 to SP-1
@CONTINUE       //Set CONTINUE in memory
0;JMP           //Jump to CONTINUE
(FALSE)         //If FALSE (we jumped here)
@SP             //Get SP
A=M-1           //Get address of SP-1 and store in A
M=0             //Set that to 0
(CONTINUE)      //...CONTINUE

//AND
@SP         //Get stack pointer
AM=M-1      //Decrement stack pointer and set A to M-1
D=M         //Set D to the last value on the stack
A=A-1       //Set pointer to last value - 1
M=D&M       //Compute the AND and put in memory

//OR
@SP         //Get stack pointer
AM=M-1      //Decrement stack pointer and set A to M-1
D=M         //Set D to the last value on the stack
A=A-1       //Set pointer to last value - 1
M=D|M       //Compute the OR and put in memory

//NOT
@SP             //Get SP
A=M-1           //Get value of M-1 (SP-1) and put in A
M=!M            //Set SP-1 to !M

//Push constant 20
@20             //Put 20 into A register
D=A             //Put 20 into D register
@SP             //Get SP
A=M             //Dereference SP
M=D             //Put D into memory at SP
@SP
M=M+1           //Increment SP

//Push local/argument/this/that--example is for push local 3.
@LCL            //Get address of local
D=M             //Store in D
@3              //Set A to the array pointer offset
A=D+A           //Get address of array base + offset
D=M             //Get the value from memory
@SP
A=M             //Dereference the stack pointer
M=D             //Set the D value into SP
@SP
M=M+1           //Increment SP

//Push temp or pointer argument -- push temp 2
@7              //Put hardcoded address into A register
D=M             //Dereference temp address
@SP             //Get SP
A=M             //Dereference SP
M=D             //Put D into memory at SP
@SP
M=M+1           //Increment SP

//Push static argument-- example push static 3
@Xxx.3          //Address mnemonic
D=M             //Store that value in D register
@SP
A=M             //Dereference SP
M=D             //Push value to SP
@SP
M=M+1           //Increment SP

//Pop local/argument/this/that--example is pop argument 2.
@ARG
D=M             //Set A to base address of ARG and get value
@2
D=D+A           //Get pointer to ARG + offset
@R13
M=D             //Store address in register 13
@SP
AM=M-1          //Get SP and dereference, decrement the pointer
D=M             //Set D to last element in stack
@R13
A=M             //Get the address from R13
M=D             //Store the value from D in pointer from R13

//Pop temp or pointer argument -- example is pop temp 2
@SP
AM=M-1          //Get SP and dereference
D=M             //Store popped value in D
@5              //Address of temp 2 (hard-coded because it is known in advance)
M=D             //Put D in memory at temp 2.

//Pop static variable.  example pop static 3
@SP
AM=M-1          //Get SP and dereference, decrement SP
D=M             //Pop end of stack value to D
@Xxx.3          //Set static address (known in advance)
M=D             //Put D's value in memory